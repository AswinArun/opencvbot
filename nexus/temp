#include <SoftwareSerial.h>

SoftwareSerial BTSerial(10, 11); // RX, TX pins for Bluetooth module

const int enA = 9;
const int in1 = 8;
const int in2 = 7;
const int enB = 5;
const int in3 = 4;
const int in4 = 2;

const int led = 13;

float Kp = 0.2; // Proportional gain
float Ki = 0.005; // Integral gain
float Kd = 1; // Derivative gain
float integralError = 0;
float derivativeError = 0;

float prevError = 0;

float error = 0.0;
int basespeed = 0;

void setup() {
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
    
  Serial.begin(9600);
  BTSerial.begin(9600);
}

void loop() {
  if (BTSerial.available()) {
      error = (BTSerial.readStringUntil(' ')).toFloat(); // Read until newline character
      Serial.println(error);
  }

  /*if (error == 10){ //triangle obstacle
    digitalWrite(led, HIGH);
    delay(100);
    digitalWrite(led, LOW);
    continue;
  }

  else if (error == 20){ // rectangle obstacle
    digitalWrite(led, HIGH);
    delay(100);
    digitalWrite(led, LOW);
    delay(100);
    digitalWrite(led, HIGH);
    delay(100);
    digitalWrite(led, LOW);
    continue;
  }*/

  // Print LDR values for debugging
  Serial.println(error);

  integralError+= error;

  derivativeError = error - prevError;


  prevError = error;

  // Calculate control signals for left and right motors
  int controlSignal = Kp * error + Ki * integralError + Kd * derivativeError;
  // Clip the control signals to avoid excessive values
  controlSignal = constrain(controlSignal, -255, 255);

}

void applyMotorControl(int controlSignal) {
  if (controlSignal >= 0) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    analogWrite(enA, controlSignal);

    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    analogWrite(enB, controlSignal);
    
  } else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    analogWrite(enA, -controlSignal);

    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    analogWrite(enB, -controlSignal);
  }
}